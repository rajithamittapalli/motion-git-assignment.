Docker Architecture
Docker follows a client-server architecture consisting of the following components:

Docker Client

CLI or GUI that communicates with the Docker daemon.
Sends commands like docker run to the daemon.
Docker Daemon (dockerd)

Runs on the host machine and manages containers.
Listens for API requests and manages images, containers, and networks.
Docker Images

Immutable templates used to create containers.
Built using Dockerfiles and stored in repositories like Docker Hub.
Containers

Lightweight, isolated runtime environments created from Docker images.
Uses the host OS kernel via namespaces and control groups (cgroups).
Docker Registries (e.g., Docker Hub, private registries)

Stores and distributes Docker images.
Users can push and pull images.
Storage and Networking

Uses storage drivers for managing container file systems.
Supports various network drivers: bridge, host, overlay, macvlan.
Basic Docker Commands
Here are some essential Docker commands:

Image Management
docker pull <image> – Download an image from Docker Hub.
docker images – List all available images.
docker rmi <image> – Remove an image.
Container Management
docker run -d --name <container> <image> – Run a container in detached mode.
docker ps – List running containers.
docker ps -a – List all containers (running + stopped).
docker stop <container> – Stop a running container.
docker rm <container> – Remove a container.
Container Lifecycle
A container transitions through multiple states:

Created – Container is created but not started (docker create).
Running – Active and executing (docker start or docker run).
Paused – Temporarily suspended (docker pause).
Stopped – Execution halted (docker stop).
Restarted – Stopped container restarted (docker restart).
Exited – Container has stopped (docker ps -a).
Deleted – Removed from the system (docker rm).
Docker Volume Management
docker volume create <name> – Create a volume.
docker volume ls – List all volumes.
docker run -v <volume>:/path/in/container <image> – Attach volume to a container.
docker volume rm <name> – Remove a volume.
Networking
docker network ls – List available networks.
docker network create <name> – Create a new network.
docker network connect <network> <container> – Attach a container to a network.
Docker Hub Usage
Docker Hub is a cloud-based registry where users can store, share, and manage Docker images.

Key Features
Public and private repositories for images.
Automated builds from GitHub/Bitbucket.
Official images for common applications (e.g., nginx, mysql).
Image versioning and tags.
Basic Docker Hub Commands
Login to Docker Hub:
bash
Copy
Edit
docker login
Pull an image from Docker Hub:
bash
Copy
Edit
docker pull <image>:<tag>
Tag an image for Docker Hub:
bash
Copy
Edit
docker tag <image> <username>/<repository>:<tag>
Push an image to Docker Hub:
bash
Copy
Edit
docker push <username>/<repository>:<tag>
Conclusion
Docker simplifies containerization through its lightweight architecture and powerful CLI tools. Understanding Docker's architecture, container lifecycle, essential commands, and Docker Hub usage helps streamline development, deployment, and CI/CD workflows.
